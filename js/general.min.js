function sortHeaders(n,t){var i=n.name.toLowerCase(),r=t.name.toLowerCase();return i<r?-1:i>r?1:0}function getStyle(n){var t="";return n.match(/(200|201|202|203|204|205|206|207)/g)!==null&&(t="success"),n.match(/(300|301|302|303|304|305|306|307)/g)!==null&&(t="info"),n.match(/(400|401|402|403|404|405|406|407|408|409|410|411|412|413|414|415|416|417)/g)!==null&&(t="error"),n.match(/(500|501|502|503|504|505)/g)!==null&&(t="error"),t};
$(function() {
    chrome.tabs.getSelected(function(n) {
        var i = chrome.extension.getBackgroundPage().headerInfo[
                n.id],
            t, r, s, u, f, e, o;
        if (i !== undefined) {
            for (console.log(i), t = "", r = 0, s = i.response.length; r <
                s; ++r) {
                for (var j = 0; j < i.response[r].responseHeaders.length; j++){
                    if (i.response[r].responseHeaders[j].name === "X-Powered-By") {
                        var php_string = i.response[r].responseHeaders[j].value
                        var rx = /PHP\/(\d{1,2}\.\d{1,2}\.\d{1,2})/
                        var php_version = php_string.replace(rx,"$1")

                        if (versionCompare(php_version, '5.6.0') < 0) {
                            chrome.browserAction.setIcon({path: "img/icon19-core.png"});
                        } else {
                            chrome.browserAction.setIcon({path: "img/icon19-grants.png"})
                        }
                    }
                }
            }
        }
    })
});
function versionCompare(v1, v2, options) {
    var lexicographical = options && options.lexicographical,
        zeroExtend = options && options.zeroExtend,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) {
        return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
    }

    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
        return NaN;
    }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push("0");
        while (v2parts.length < v1parts.length) v2parts.push("0");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) {
            return 1;
        }

        if (v1parts[i] == v2parts[i]) {
            continue;
        }
        else if (v1parts[i] > v2parts[i]) {
            return 1;
        }
        else {
            return -1;
        }
    }

    if (v1parts.length != v2parts.length) {
        return -1;
    }

    return 0;
}
