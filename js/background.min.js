var headerInfo = {};
chrome.webRequest.onHeadersReceived.addListener(function(n) {
    parseInt(n.tabId, 10) > 0 && (typeof headerInfo[n.tabId].response[0] != "undefined" && headerInfo[n.tabId].response[0].requestId !== n.requestId && (headerInfo[n.tabId].response = []), headerInfo[n.tabId].response.push(n))
}, {
    urls: ["<all_urls>"],
    types: ["main_frame"]
}, ["responseHeaders"]), chrome.webRequest.onSendHeaders.addListener(function(n) {
    parseInt(n.tabId, 10) > 0 && (typeof headerInfo[n.tabId] == "undefined" ? (headerInfo[n.tabId] = {}, headerInfo[n.tabId].request = [], headerInfo[n.tabId].response = []) : headerInfo[n.tabId].request[0].requestId !== n.requestId && (headerInfo[n.tabId].request = []), headerInfo[n.tabId].request.push(n))
}, {
    urls: ["<all_urls>"],
    types: ["main_frame"]
}, ["requestHeaders"]);

chrome.tabs.onActivated.addListener(function(activeInfo) {
    init()
})
chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab){
    init()
})

function init() {
    chrome.tabs.getSelected(function(n) {
        var i = chrome.extension.getBackgroundPage().headerInfo[n.id];
        if (i !== undefined) {
            for (var r = 0; r < i.response.length; ++r) {
                for (var j = 0; j < i.response[r].responseHeaders.length; j++){
                    if (i.response[r].responseHeaders[j].name === "X-Powered-By") {
                        var php_string = i.response[r].responseHeaders[j].value
                        var rx = /PHP\/(\d{1,2}\.\d{1,2}\.\d{1,2})/
                        var php_version = i.response[r].responseHeaders[j].value.replace(rx,"$1")

                        if (rx.test(php_string)) {
                            // PHP Version provided
                            if (versionCompare(php_version, '5.6.0') < 0) {
                                chrome.browserAction.setIcon({path: "img/icon19-core.png"});
                            } else {
                                chrome.browserAction.setIcon({path: "img/icon19-grants.png"})
                            }
                        } else {
                            chrome.browserAction.setIcon({path: "img/icon19.png"})
                        }
                    }
                }
            }
        }
    })
}

function versionCompare(v1, v2, options) {
    var lexicographical = options && options.lexicographical,
        zeroExtend = options && options.zeroExtend,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) {
        return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
    }

    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
        return NaN;
    }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push("0");
        while (v2parts.length < v1parts.length) v2parts.push("0");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) {
            return 1;
        }

        if (v1parts[i] == v2parts[i]) {
            continue;
        }
        else if (v1parts[i] > v2parts[i]) {
            return 1;
        }
        else {
            return -1;
        }
    }

    if (v1parts.length != v2parts.length) {
        return -1;
    }

    return 0;
}
