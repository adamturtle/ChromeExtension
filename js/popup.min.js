$(function() {
    chrome.tabs.getSelected(function(n) {
        var i = chrome.extension.getBackgroundPage().headerInfo[
                n.id],
            t, r, s, u, f, e, o;
        if (i == undefined) $("#result").html(
            "<b><br />Could not retrieve any headers, try reload the tab to view the headers.<br />chrome:// pages and Chrome Store don't provide any response headers.<br /><br /><\/b>"
        );
        else {
            for (console.log(i), t = "", r = 0, s = i.response.length; r <
                s; ++r) {
            //     for (i.request[r].requestHeaders.sort(
            //             sortHeaders), i.response[r].responseHeaders
            //         .sort(sortHeaders), t +=
            //         '<table class="table table-bordered table-condensed">',
            //         t += '<tr class="' + getStyle(i.response[r]
            //             .statusLine) + '"><td colspan="2">', t +=
            //         "<b>" + i.request[r].method +
            //         '<\/b> <input type="text" value="' + i.response[
            //             r].url + '" /><br /> <b>Status:<\/b> ' +
            //         i.response[r].statusLine, t +=
            //         "<\/td><\/tr>", t +=
            //         '<tr class="warning"><td colspan="2"><div class="text-center"><b>Request Headers<\/b><\/div><\/td><\/tr>',
            //         u = 0, f = i.request[r].requestHeaders.length; u <
            //         f; ++u) e = i.request[r].requestHeaders[u].name,
            //         o = i.request[r].requestHeaders[u].value, t +=
            //         "<tr>", t += '<th nowrap="nowrap">' + e +
            //         "<\/th>", t +=
            //         '<td><input type="text" value="' + o.replace(
            //             /"/g, "&#34;") + '" /><\/td>', t +=
            //         "<\/tr>";
            //     for (t +=
            //         '<tr class="warning"><td colspan="2"><div class="text-center"><b>Response Headers<\/b><\/div><\/td><\/tr>',
            //         u = 0, f = i.response[r].responseHeaders.length; u <
            //         f; ++u) e = i.response[r].responseHeaders[u]
            //         .name, o = i.response[r].responseHeaders[u]
            //         .value, t += "<tr>", t +=
            //         '<th nowrap="nowrap">' + e + "<\/th>", t +=
            //         '<td><input type="text" value="' + o.replace(
            //             /"/g, "&#34;") + '" /><\/td>', t +=
            //         "<\/tr>";
            //     t += "<table>"
                for (var j = 0; j < i.response[r].responseHeaders.length; j++){
                    if (i.response[r].responseHeaders[j].name === "X-Powered-By") {
                        var php_string = i.response[r].responseHeaders[j].value
                        var rx = /PHP\/(\d{1,2}\.\d{1,2}\.\d{1,2})/
                        var php_version = php_string.replace(rx,"$1")

                        if (versionCompare(php_version, '5.6.0') < 0) {
                            t+= 'Old'
                            chrome.browserAction.setIcon({path: "img/icon19-core.png"});
                        } else {
                            t+= 'New'
                            chrome.browserAction.setIcon({path: "img/icon19-grants.png"})
                        }
                    }
                }
            }
            $("#result").html(t);
            $("input[type=text]").click(function() {
                $(this).select()
            })
        }
    })
});
function versionCompare(v1, v2, options) {
    var lexicographical = options && options.lexicographical,
        zeroExtend = options && options.zeroExtend,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) {
        return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
    }

    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
        return NaN;
    }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push("0");
        while (v2parts.length < v1parts.length) v2parts.push("0");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) {
            return 1;
        }

        if (v1parts[i] == v2parts[i]) {
            continue;
        }
        else if (v1parts[i] > v2parts[i]) {
            return 1;
        }
        else {
            return -1;
        }
    }

    if (v1parts.length != v2parts.length) {
        return -1;
    }

    return 0;
}
